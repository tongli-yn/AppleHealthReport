import Foundation
import PDFKit
import HealthKit

struct PDFGenerator {
    let manager: HealthKitManager
    let aiSummary: String?
    func generatePDF() -> Data {
        let format = UIGraphicsPDFRendererFormat()
        let metaData: [String: Any] = [
            kCGPDFContextTitle as String: "Rapport de Sant√© Complet",
            kCGPDFContextAuthor as String: "Mon Application Sant√©"
        ]
        format.documentInfo = metaData

        let pageRect = CGRect(x: 0, y: 0, width: 595.2, height: 841.8) // A4
        let renderer = UIGraphicsPDFRenderer(bounds: pageRect, format: format)

        let data = renderer.pdfData { context in
            context.beginPage()
            drawHeader(in: context, pageRect: pageRect)
            drawUserInfo(in: context, pageRect: pageRect)
            
            var currentY = drawCardioSection(in: context, pageRect: pageRect, startY: 180)
            currentY = drawActivitySection(in: context, pageRect: pageRect, startY: currentY + 20)
            currentY = drawBodySection(in: context, pageRect: pageRect, startY: currentY + 20)
            currentY = drawNutritionSection(in: context, pageRect: pageRect, startY: currentY + 20)
            currentY = drawSleepSection(in: context, pageRect: pageRect, startY: currentY + 20)
            
            if currentY > pageRect.height - 100 {
                context.beginPage()
                currentY = 50
            }
            
            drawVitalitySection(in: context, pageRect: pageRect, startY: currentY)
            if let summary = aiSummary {
                context.beginPage()
                _ = drawAIAssessment(in: context, pageRect: pageRect, startY: 50, text: summary)
            }
        }

        return data
    }
    func motivationalSummary() -> String {
        var parts: [String] = []

        // IMC
        switch manager.bmi {
        case ..<18.5:
            parts.append("ü¶¥ Vous √™tes un peu l√©ger¬∑√®re ! Ajoutez du carburant √† cette fus√©e corporelle. Plus de calories, plus d'√©nergie, GO ! üí™")
        case 18.5..<25:
            parts.append("ü•ó Votre IMC est parfait ! Vous √™tes aussi √©quilibr√©¬∑e qu‚Äôune salade bio en m√©ditation.")
        case 25..<30:
            parts.append("‚öñÔ∏è L√©g√®rement au-dessus ? Rien d'alarmant ! On se bouge un peu, on mange smart, et hop, retour √† la zone verte.")
        default:
            parts.append("üî• Mission br√ªlage de gras enclench√©e ! Pas de panique, chaque jour est une nouvelle chance. Allez, ON Y VA !")
        }

        // Fr√©quence cardiaque
        if manager.heartRate < 60 {
            parts.append("üßò‚Äç‚ôÇÔ∏è Fr√©quence cardiaque de moine Shaolin d√©tect√©e. Zen extr√™me. Trop cool.")
        } else if manager.heartRate <= 100 {
            parts.append("‚ù§Ô∏è Fr√©quence cardiaque ? Royal. Votre c≈ìur bat au rythme d‚Äôun tambour zen.")
        } else {
            parts.append("‚ö°Ô∏è C≈ìur en mode turbo ! Peut-√™tre trop de caf√© ou trop d'amour ? Dans tous les cas, check-up conseill√©.")
        }

        // Sommeil
        let sleepHours = calculateSleepDuration()
        if sleepHours < 6 {
            parts.append("üòµ Moins de 6h de sommeil ?! Bro, tu veux devenir zombie ? Au lit plus t√¥t ce soir, et que √ßa saute !")
        } else if sleepHours <= 9 {
            parts.append("üò¥ Vous dormez comme un koala sous s√©datif. R√©cup√©ration niveau pro.")
        } else {
            parts.append("‚è∞ Vous dormez beaucoup... recharge compl√®te activ√©e. Veillez juste √† ne pas rater le matin !")
        }

        // Activit√©
        let steps = manager.steps.last?.value ?? 0
        if steps < 4000 {
            parts.append("üõãÔ∏è Alerte canap√© ! Levez-vous, bougez, mettez du feu dans vos semelles !")
        } else if steps < 8000 {
            parts.append("üö∂ Activit√© mod√©r√©e. C‚Äôest bien, mais on veut du **üî•üî•üî•** !")
        } else {
            parts.append("üèÉ Activit√© physique : vous √™tes une machine de guerre ! Continuez √† marcher comme si vous conqu√©riez le monde.")
        }

        parts.append("üöÄ **Conclusion :** continuez comme √ßa. Mangez bien. Buvez de l‚Äôeau. Soyez le boss de votre bien-√™tre.")

        return parts.joined(separator: "\n\n")
    }

    private func drawHeader(in context: UIGraphicsPDFRendererContext, pageRect: CGRect) {
        let dateFormatter = DateFormatter()
        dateFormatter.dateStyle = .long
        dateFormatter.locale = Locale(identifier: "fr_FR")
        
        let title = "üìä Rapport de Sant√© Complet"
        let date = "Date: \(dateFormatter.string(from: Date()))"
        
        let titleAttrs: [NSAttributedString.Key: Any] = [
            .font: UIFont.boldSystemFont(ofSize: 24),
            .foregroundColor: UIColor(red: 0.1, green: 0.3, blue: 0.5, alpha: 1)
        ]
        
        let dateAttrs: [NSAttributedString.Key: Any] = [
            .font: UIFont.italicSystemFont(ofSize: 14),
            .foregroundColor: UIColor.gray
        ]
        
        NSString(string: title).draw(at: CGPoint(x: 50, y: 40), withAttributes: titleAttrs)
        NSString(string: date).draw(at: CGPoint(x: 50, y: 75), withAttributes: dateAttrs)
    }

    private func drawUserInfo(in context: UIGraphicsPDFRendererContext, pageRect: CGRect) {
        let yPosition: CGFloat = 110
        let lineSpacing: CGFloat = 25
        let labelFont = UIFont.boldSystemFont(ofSize: 14)
        let valueFont = UIFont.systemFont(ofSize: 14)
        
        let age = manager.age.map { "\($0) ans" } ?? "Non disponible"
        let sex = manager.biologicalSex.map { sexToString($0) } ?? "Non disponible"

        
        let userData = [
            ("√Çge", age),
            ("Sexe biologique", sex),
            ("Taille", String(format: "%.2f m", manager.height)),
            ("Poids", String(format: "%.1f kg", manager.bodyMass))
        ]
        
        for (index, (label, value)) in userData.enumerated() {
            let y = yPosition + CGFloat(index) * 20
            NSString(string: "\(label):").draw(at: CGPoint(x: 50, y: y), withAttributes: [.font: labelFont])
            NSString(string: value).draw(at: CGPoint(x: 200, y: y), withAttributes: [.font: valueFont])
        }
        
        let finalY = yPosition + CGFloat(userData.count) * lineSpacing
            context.cgContext.translateBy(x: 0, y: 30)
    }


    private func drawCardioSection(in context: UIGraphicsPDFRendererContext, pageRect: CGRect, startY: CGFloat) -> CGFloat {
        let title = "‚ù§Ô∏è Sant√© Cardiovasculaire"
        let titleAttrs: [NSAttributedString.Key: Any] = [
            .font: UIFont.boldSystemFont(ofSize: 18),
            .foregroundColor: UIColor(red: 0.8, green: 0.2, blue: 0.2, alpha: 1)
        ]
        
        NSString(string: title).draw(at: CGPoint(x: 50, y: startY), withAttributes: titleAttrs)
        
        let cardioData = [
            HealthMetric(
                title: "Fr√©quence cardiaque",
                definition: "Nombre de battements cardiaques par minute",
                reference: "60-100 bpm (adulte au repos)",
                value: manager.heartRate,
                evaluation: rating(for: manager.heartRate, normalRange: 60...100)
            ),
            HealthMetric(
                title: "FC au repos",
                definition: "Fr√©quence cardiaque la plus basse pendant l'√©veil",
                reference: "50-80 bpm (selon condition physique)",
                value: manager.restingHeartRate,
                evaluation: rating(for: manager.restingHeartRate, normalRange: 50...80)
            ),
            HealthMetric(
                title: "Saturation O2",
                definition: "Niveau d'oxyg√©nation du sang",
                reference: "95-100% (niveau normal)",
                value: manager.oxygenSaturation * 100,
                evaluation: rating(for: manager.oxygenSaturation * 100, normalRange: 95...100)
            ),
            HealthMetric(
                title: "Pression art√©rielle",
                definition: "Pression systolique/diastolique",
                reference: "<120/<80 mmHg (id√©al)",
                value: 0, // ÈúÄË¶ÅÂÆûÈôÖÊï∞ÊçÆ
                evaluation: "Non mesur√©e"
            )
        ]
        
        return drawMetricsSection(in: context, pageRect: pageRect, startY: startY + 30, metrics: cardioData)
    }


    private func drawActivitySection(in context: UIGraphicsPDFRendererContext, pageRect: CGRect, startY: CGFloat) -> CGFloat {
        let title = "üèÉ Activit√© Physique"
        let titleAttrs: [NSAttributedString.Key: Any] = [
            .font: UIFont.boldSystemFont(ofSize: 18),
            .foregroundColor: UIColor(red: 0.2, green: 0.6, blue: 0.2, alpha: 1)
        ]
        
        NSString(string: title).draw(at: CGPoint(x: 50, y: startY), withAttributes: titleAttrs)
        
        let activityData = [
            HealthMetric(
                title: "Pas quotidiens",
                definition: "Nombre total de pas effectu√©s",
                reference: "8,000-10,000 (recommandation g√©n√©rale)",
                value: manager.steps.last?.value ?? 0,
                evaluation: stepsEvaluation()
            ),
            HealthMetric(
                title: "Distance march√©e",
                definition: "Distance totale parcourue √† pied",
                reference: "5-8 km (objectif journalier)",
                value: manager.distanceWalking / 1000,
                evaluation: distanceEvaluation()
            ),
            HealthMetric(
                title: "Calories d√©pens√©es",
                definition: "√ânergie d√©pens√©e en activit√©",
                reference: "Varie selon le m√©tabolisme",
                value: manager.calories,
                evaluation: caloriesEvaluation()
            ),
            HealthMetric(
                title: "Temps d'exercice",
                definition: "Minutes d'activit√© physique mod√©r√©e √† intense",
                reference: "30-60 min/jour (recommandation OMS)",
                value: manager.exerciseTime,
                evaluation: rating(for: manager.exerciseTime, normalRange: 30...60)
            ),
            HealthMetric(
                title: "Temps debout",
                definition: "Minutes pass√©es en position debout",
                reference: "2-4 heures/jour (pour sant√© m√©tabolique)",
                value: manager.standTime,
                evaluation: rating(for: manager.standTime, normalRange: 120...240)
            )
        ]
        
        return drawMetricsSection(in: context, pageRect: pageRect, startY: startY + 30, metrics: activityData)
    }


    private func drawBodySection(in context: UIGraphicsPDFRendererContext, pageRect: CGRect, startY: CGFloat) -> CGFloat {
        let title = "üèãÔ∏è Composition Corporelle"
        let titleAttrs: [NSAttributedString.Key: Any] = [
            .font: UIFont.boldSystemFont(ofSize: 18),
            .foregroundColor: UIColor(red: 0.4, green: 0.2, blue: 0.6, alpha: 1)
        ]
        
        NSString(string: title).draw(at: CGPoint(x: 50, y: startY), withAttributes: titleAttrs)
        
        let bodyData = [
            HealthMetric(
                title: "IMC",
                definition: "Indice de Masse Corporelle (poids/taille¬≤)",
                reference: "18.5-24.9 (poids normal)",
                value: manager.bmi,
                evaluation: bmiEvaluation()
            ),
            HealthMetric(
                title: "Masse grasse",
                definition: "Pourcentage de graisse corporelle",
                reference: "Homme: 10-20%, Femme: 18-28%",
                value: manager.bodyFatPercentage * 100,
                evaluation: bodyFatEvaluation()
            ),
            HealthMetric(
                title: "Tour de taille",
                definition: "Circonf√©rence abdominale",
                reference: "Homme <102cm, Femme <88cm",
                value: 0,
                evaluation: "Non mesur√©"
            ),
            HealthMetric(
                title: "Masse musculaire",
                definition: "Pourcentage de masse musculaire",
                reference: "Varie selon l'√¢ge et le sexe",
                value: 0,
                evaluation: "Non mesur√©e"
            )
        ]
        
        return drawMetricsSection(in: context, pageRect: pageRect, startY: startY + 30, metrics: bodyData)
    }

   
    private func drawNutritionSection(in context: UIGraphicsPDFRendererContext, pageRect: CGRect, startY: CGFloat) -> CGFloat {
        let title = "üçé Nutrition"
        let titleAttrs: [NSAttributedString.Key: Any] = [
            .font: UIFont.boldSystemFont(ofSize: 18),
            .foregroundColor: UIColor(red: 0.9, green: 0.5, blue: 0.1, alpha: 1)
        ]
        
        NSString(string: title).draw(at: CGPoint(x: 50, y: startY), withAttributes: titleAttrs)
        
        let nutritionData = [
            HealthMetric(
                title: "Eau consomm√©e",
                definition: "Volume total de liquides ing√©r√©s",
                reference: "2-3 L/jour (selon activit√©)",
                value: manager.water,
                evaluation: waterEvaluation()
            ),
            HealthMetric(
                title: "Glucides",
                definition: "Apports totaux en glucides",
                reference: "45-65% des calories totales",
                value: manager.dietaryCarbs,
                evaluation: "Analyse nutritionnelle recommand√©e"
            ),
            HealthMetric(
                title: "Prot√©ines",
                definition: "Apports totaux en prot√©ines",
                reference: "1.2-2.0 g/kg de poids",
                value: manager.dietaryProtein,
                evaluation: proteinEvaluation()
            ),
            HealthMetric(
                title: "Lipides",
                definition: "Apports totaux en graisses",
                reference: "20-35% des calories totales",
                value: manager.dietaryFat,
                evaluation: "Analyse nutritionnelle recommand√©e"
            ),
            HealthMetric(
                title: "Sucres ajout√©s",
                definition: "Sucres libres/ajout√©s consomm√©s",
                reference: "<25 g/jour (OMS)",
                value: manager.dietarySugar,
                evaluation: rating(for: manager.dietarySugar, upperLimit: 25)
            ),
            HealthMetric(
                title: "Caf√©ine",
                definition: "Consommation totale de caf√©ine",
                reference: "<400 mg/jour (adulte)",
                value: manager.dietaryCaffeine,
                evaluation: rating(for: manager.dietaryCaffeine, upperLimit: 400)
            )
        ]
        
        return drawMetricsSection(in: context, pageRect: pageRect, startY: startY + 30, metrics: nutritionData)
    }


    private func drawSleepSection(in context: UIGraphicsPDFRendererContext, pageRect: CGRect, startY: CGFloat) -> CGFloat {
        let title = "üò¥ Sommeil"
        let titleAttrs: [NSAttributedString.Key: Any] = [
            .font: UIFont.boldSystemFont(ofSize: 18),
            .foregroundColor: UIColor(red: 0.3, green: 0.3, blue: 0.8, alpha: 1)
        ]
        
        NSString(string: title).draw(at: CGPoint(x: 50, y: startY), withAttributes: titleAttrs)
        
        let sleepDuration = calculateSleepDuration()
        let sleepData = [
            HealthMetric(
                title: "Dur√©e de sommeil",
                definition: "Temps total pass√© √† dormir",
                reference: "7-9 heures (adulte)",
                value: sleepDuration,
                evaluation: sleepDurationEvaluation(duration: sleepDuration)
            ),
            HealthMetric(
                title: "Efficacit√© du sommeil",
                definition: "% de temps pass√© endormi par rapport au temps au lit",
                reference: ">85% (bonne efficacit√©)",
                value: calculateSleepEfficiency(),
                evaluation: sleepEfficiencyEvaluation()
            ),
            HealthMetric(
                title: "Heure de coucher",
                definition: "Moment o√π vous vous endormez",
                reference: "Avant 23h (recommand√©)",
                value: 0, // ÈúÄË¶ÅÂÆûÈôÖÊï∞ÊçÆ
                evaluation: bedtimeEvaluation()
            ),
            HealthMetric(
                title: "R√©veils nocturnes",
                definition: "Nombre d'√©veils pendant la nuit",
                reference: "1-2 (normal)",
                value: Double(manager.sleepSamples.filter { $0.value == HKCategoryValueSleepAnalysis.awake.rawValue }.count),
                evaluation: awakeningsEvaluation()
            )
        ]
        
        return drawMetricsSection(in: context, pageRect: pageRect, startY: startY + 30, metrics: sleepData)
    }

   
    private func drawVitalitySection(in context: UIGraphicsPDFRendererContext, pageRect: CGRect, startY: CGFloat) -> CGFloat {
        let title = "üå°Ô∏è Signes Vitaux"
        let titleAttrs: [NSAttributedString.Key: Any] = [
            .font: UIFont.boldSystemFont(ofSize: 18),
            .foregroundColor: UIColor(red: 0.8, green: 0.4, blue: 0.0, alpha: 1)
        ]
        
        NSString(string: title).draw(at: CGPoint(x: 50, y: startY), withAttributes: titleAttrs)
        
        let vitalityData = [
            HealthMetric(
                title: "Temp√©rature corporelle",
                definition: "Temp√©rature centrale du corps",
                reference: "36-37.5¬∞C (normale)",
                value: manager.bodyTemperature,
                evaluation: rating(for: manager.bodyTemperature, normalRange: 36...37.5)
            ),
            HealthMetric(
                title: "Fr√©quence respiratoire",
                definition: "Nombre de respirations par minute",
                reference: "12-20/min (adulte au repos)",
                value: manager.respiratoryRate,
                evaluation: rating(for: manager.respiratoryRate, normalRange: 12...20)
            ),
            HealthMetric(
                title: "Glyc√©mie",
                definition: "Concentration de glucose dans le sang",
                reference: "70-140 mg/dL (√† jeun <100)",
                value: manager.bloodGlucose,
                evaluation: bloodGlucoseEvaluation()
            ),
            HealthMetric(
                title: "Pleine conscience",
                definition: "Minutes de pratique m√©ditative",
                reference: "5-20 min/jour (b√©n√©fices d√©montr√©s)",
                value: Double(manager.mindfulMinutes.count),
                evaluation: mindfulnessEvaluation()
            )
        ]
        
        return drawMetricsSection(in: context, pageRect: pageRect, startY: startY + 30, metrics: vitalityData)
    }

    
    private struct HealthMetric {
        let title: String
        let definition: String
        let reference: String
        let value: Double
        let evaluation: String
    }
    
    private func drawMetricsSection(in context: UIGraphicsPDFRendererContext, pageRect: CGRect, startY: CGFloat, metrics: [HealthMetric]) -> CGFloat {
        var y = startY
        let titleFont = UIFont.boldSystemFont(ofSize: 14)
        let textFont = UIFont.systemFont(ofSize: 12)
        let smallFont = UIFont.systemFont(ofSize: 10)
        let lineHeight: CGFloat = 18
        let itemSpacing: CGFloat = 30
        
        for metric in metrics {
            if y > pageRect.height - 150 {
                context.beginPage()
                y = 50
            }
            
            NSString(string: metric.title).draw(
                at: CGPoint(x: 50, y: y),
                withAttributes: [
                    .font: titleFont,
                    .foregroundColor: UIColor.darkText
                ]
            )
            
            
            let valueText = String(format: "%.1f", metric.value)
            NSString(string: "Valeur: \(valueText)").draw(
                at: CGPoint(x: pageRect.width - 150, y: y),
                withAttributes: [
                    .font: titleFont,
                    .foregroundColor: UIColor(red: 0.1, green: 0.3, blue: 0.5, alpha: 1)
                ]
            )
            
            y += lineHeight
            
            NSString(string: "D√©finition: \(metric.definition)").draw(
                at: CGPoint(x: 60, y: y),
                withAttributes: [
                    .font: textFont,
                    .foregroundColor: UIColor.darkGray
                ]
            )
            
            y += lineHeight
            NSString(string: "Valeurs de r√©f√©rence: \(metric.reference)").draw(
                at: CGPoint(x: 60, y: y),
                withAttributes: [
                    .font: textFont,
                    .foregroundColor: UIColor.darkGray
                ]
            )
            
            y += lineHeight
            let evaluationColor = metric.evaluation.contains("‚úÖ") ? UIColor.systemGreen :
                                metric.evaluation.contains("‚ö†Ô∏è") ? UIColor.systemOrange :
                                metric.evaluation.contains("‚ùå") ? UIColor.systemRed :
                                UIColor.darkText
            
            NSString(string: "√âvaluation: \(metric.evaluation)").draw(
                at: CGPoint(x: 60, y: y),
                withAttributes: [
                    .font: textFont,
                    .foregroundColor: evaluationColor
                ]
            )
            
            y += itemSpacing
        
            context.cgContext.setStrokeColor(UIColor.lightGray.withAlphaComponent(0.5).cgColor)
            context.cgContext.setLineWidth(0.5)
            context.cgContext.move(to: CGPoint(x: 50, y: y - 10))
            context.cgContext.addLine(to: CGPoint(x: pageRect.width - 50, y: y - 10))
            context.cgContext.strokePath()
        }
        
        return y
    }
    

    
    private func rating(for value: Double, normalRange: ClosedRange<Double>) -> String {
        if value < normalRange.lowerBound { return "‚ö†Ô∏è Bas - Consultez un m√©decin si persistant" }
        if value > normalRange.upperBound { return "‚ö†Ô∏è √âlev√© - Consultez un m√©decin si persistant" }
        return "‚úÖ Normal - Dans les valeurs saines"
    }
    
    private func rating(for value: Double, upperLimit: Double) -> String {
        if value <= 0 { return "‚ùå Non mesur√©" }
        return value <= upperLimit ? "‚úÖ Bon - Dans les limites recommand√©es" : "‚ö†Ô∏è Trop √©lev√© - Essayez de r√©duire"
    }
    
    private func stepsEvaluation() -> String {
        let steps = manager.steps.last?.value ?? 0
        switch steps {
        case 0..<4000: return "‚ùå S√©dentaire - Essayez d'augmenter votre activit√©"
        case 4000..<8000: return "‚ö†Ô∏è Mod√©r√© - Ciblez 8,000 pas pour une sant√© optimale"
        case 8000..<12000: return "‚úÖ Actif - Excellent niveau d'activit√©"
        default: return "‚úÖ Tr√®s actif - Continuez ainsi!"
        }
    }
    
    private func distanceEvaluation() -> String {
        let distance = manager.distanceWalking / 1000
        switch distance {
        case 0..<3: return "‚ö†Ô∏è Faible - Essayez de marcher davantage"
        case 3..<5: return "‚úÖ Mod√©r√© - Bon niveau d'activit√©"
        case 5..<8: return "‚úÖ √âlev√© - Excellent pour la sant√© cardiovasculaire"
        default: return "‚úÖ Tr√®s √©lev√© - Activit√© physique intensive"
        }
    }
    
    private func caloriesEvaluation() -> String {
        let calories = manager.calories
        switch calories {
        case 0..<200: return "‚ö†Ô∏è Tr√®s faible - Augmentez votre activit√©"
        case 200..<400: return "‚ö†Ô∏è Faible - Essayez d'√™tre plus actif"
        case 400..<600: return "‚úÖ Mod√©r√© - Bon niveau d'activit√©"
        default: return "‚úÖ √âlev√© - D√©pense √©nerg√©tique importante"
        }
    }
    
    private func bmiEvaluation() -> String {
        switch manager.bmi {
        case ..<18.5: return "‚ö†Ô∏è Insuffisance pond√©rale - Consultez un nutritionniste"
        case 18.5..<25: return "‚úÖ Poids normal - Maintenez vos habitudes saines"
        case 25..<30: return "‚ö†Ô∏è Surpoids - Essayez de modifier votre alimentation et activit√©"
        default: return "‚ùå Ob√©sit√© - Consultez un professionnel de sant√©"
        }
    }
    
    private func bodyFatEvaluation() -> String {
        let bodyFat = manager.bodyFatPercentage * 100
        let isMale = manager.biologicalSex == .male
        
        if isMale {
            switch bodyFat {
            case ..<5: return "‚ùå Dangereusement bas - Risque pour la sant√©"
            case 5..<13: return "‚úÖ Athl√©tique - Tr√®s faible masse grasse"
            case 13..<18: return "‚úÖ En forme - Niveau sain"
            case 18..<25: return "‚ö†Ô∏è Acceptable - Peut √™tre am√©lior√©"
            default: return "‚ùå Trop √©lev√© - Risque accru de probl√®mes de sant√©"
            }
        } else {
            switch bodyFat {
            case ..<12: return "‚ùå Dangereusement bas - Risque pour la sant√©"
            case 12..<20: return "‚úÖ Athl√©tique - Tr√®s faible masse grasse"
            case 20..<25: return "‚úÖ En forme - Niveau sain"
            case 25..<32: return "‚ö†Ô∏è Acceptable - Peut √™tre am√©lior√©"
            default: return "‚ùå Trop √©lev√© - Risque accru de probl√®mes de sant√©"
            }
        }
    }
    
    private func waterEvaluation() -> String {
        let water = manager.water
        switch water {
        case ..<1: return "‚ùå Dangereusement bas - Risque de d√©shydratation"
        case 1..<1.5: return "‚ö†Ô∏è Insuffisant - Buvez plus d'eau"
        case 1.5..<2.5: return "‚úÖ Ad√©quat - Bon niveau d'hydratation"
        default: return "‚úÖ Excellent - Hydratation optimale"
        }
    }
    
    private func proteinEvaluation() -> String {
        guard manager.bodyMass > 0 else { return "‚ùå Donn√©es manquantes" }
        
        let proteinNeeds = manager.bodyMass * 1.2
        let protein = manager.dietaryProtein
        
        if protein <= 0 {
            return "‚ùå Non mesur√© - Assurez un apport suffisant"
        } else if protein < proteinNeeds * 0.7 {
            return "‚ùå Tr√®s insuffisant (\(String(format: "%.1f", protein))g) - Risque de perte musculaire"
        } else if protein < proteinNeeds {
            return "‚ö†Ô∏è L√©g√®rement insuffisant (\(String(format: "%.1f", protein))g) - Cible: \(String(format: "%.1f", proteinNeeds))g"
        } else if protein < proteinNeeds * 1.5 {
            return "‚úÖ Ad√©quat (\(String(format: "%.1f", protein))g) - Apport optimal"
        } else {
            return "‚úÖ √âlev√© (\(String(format: "%.1f", protein))g) - Convient aux sportifs"
        }
    }
    
    private func bloodGlucoseEvaluation() -> String {
        let glucose = manager.bloodGlucose
        switch glucose {
        case ..<70: return "‚ùå Hypoglyc√©mie - Risque de malaise"
        case 70..<100: return "‚úÖ Normal - Niveau optimal"
        case 100..<126: return "‚ö†Ô∏è √âlev√© - Pr√©diab√®te possible"
        default: return "‚ùå Tr√®s √©lev√© - Risque de diab√®te"
        }
    }
    
    private func mindfulnessEvaluation() -> String {
        let minutes = manager.mindfulMinutes.count
        switch minutes {
        case 0: return "‚ùå Aucune pratique - La m√©ditation r√©duit le stress"
        case 1..<5: return "‚ö†Ô∏è Occasionnelle - Essayez 5-10 min/jour"
        case 5..<10: return "‚úÖ R√©guli√®re - Bonne habitude"
        case 10..<20: return "‚úÖ Excellente - Effets b√©n√©fiques d√©montr√©s"
        default: return "‚úÖ Exceptionnelle - Tr√®s b√©n√©fique pour la sant√© mentale"
        }
    }
    
    private func calculateSleepDuration() -> Double {
        let sleepMinutes = manager.sleepSamples
            .filter { $0.value == HKCategoryValueSleepAnalysis.asleep.rawValue }
            .reduce(0) { $0 + $1.endDate.timeIntervalSince($1.startDate) / 60 }
        return sleepMinutes / 60
    }
    
    private func sleepDurationEvaluation(duration: Double) -> String {
        switch duration {
        case ..<5: return "‚ùå Dangereusement insuffisant (\(String(format: "%.1f", duration))h) - Risque accru de probl√®mes de sant√©"
        case 5..<6: return "‚ö†Ô∏è Insuffisant (\(String(format: "%.1f", duration))h) - Fatigue probable"
        case 6..<7: return "‚ö†Ô∏è L√©g√®rement insuffisant (\(String(format: "%.1f", duration))h) - Ciblez 7-9h"
        case 7..<9: return "‚úÖ Optimal (\(String(format: "%.1f", duration))h) - Dur√©e recommand√©e"
        case 9..<10: return "‚úÖ Long (\(String(format: "%.1f", duration))h) - Peut convenir selon les besoins"
        default: return "‚ö†Ô∏è Tr√®s long (\(String(format: "%.1f", duration))h) - Peut indiquer un probl√®me sous-jacent"
        }
    }
    
    private func calculateSleepEfficiency() -> Double {
        let totalSleepTime = manager.sleepSamples
            .filter { $0.value == HKCategoryValueSleepAnalysis.asleep.rawValue }
            .reduce(0) { $0 + $1.endDate.timeIntervalSince($1.startDate) }
        
        let totalTimeInBed = manager.sleepSamples
            .reduce(0) { $0 + $1.endDate.timeIntervalSince($1.startDate) }
        
        guard totalTimeInBed > 0 else { return 0 }
        return (totalSleepTime / totalTimeInBed) * 100
    }
    
    private func sleepEfficiencyEvaluation() -> String {
        let efficiency = calculateSleepEfficiency()
        switch efficiency {
        case ..<75: return "‚ùå Faible (\(String(format: "%.1f", efficiency))%) - Beaucoup de temps √©veill√© au lit"
        case 75..<85: return "‚ö†Ô∏è Moyenne (\(String(format: "%.1f", efficiency))%) - Peut √™tre am√©lior√©e"
        case 85..<90: return "‚úÖ Bonne (\(String(format: "%.1f", efficiency))%) - Efficacit√© satisfaisante"
        default: return "‚úÖ Excellente (\(String(format: "%.1f", efficiency))%) - Sommeil tr√®s efficace"
        }
    }
    
    private func bedtimeEvaluation() -> String {
        guard let firstSleep = manager.sleepSamples
            .filter({ $0.value == HKCategoryValueSleepAnalysis.asleep.rawValue })
            .min(by: { $0.startDate < $1.startDate }) else {
            return "‚ùå Non mesur√© - Utilisez le suivi du sommeil"
        }
        
        let calendar = Calendar.current
        let hour = calendar.component(.hour, from: firstSleep.startDate)
        let minute = calendar.component(.minute, from: firstSleep.startDate)
        let timeString = String(format: "%02d:%02d", hour, minute)
        
        switch hour {
        case ..<22: return "‚úÖ Tr√®s t√¥t (\(timeString)) - Horaire excellent"
        case 22..<23: return "‚úÖ Id√©al (\(timeString)) - Correspond aux rythmes circadiens"
        case 23..<24: return "‚ö†Ô∏è Un peu tard (\(timeString)) - Essayez de vous coucher plus t√¥t"
        case 24..<1: return "‚ö†Ô∏è Tard (\(timeString)) - Peut perturber le cycle de sommeil"
        default: return "‚ùå Tr√®s tard (\(timeString)) - Risque de privation de sommeil"
        }
    }
    
    private func awakeningsEvaluation() -> String {
        let awakenings = manager.sleepSamples.filter { $0.value == HKCategoryValueSleepAnalysis.awake.rawValue }.count
        switch awakenings {
        case 0: return "‚úÖ Aucun - Sommeil continu excellent"
        case 1..<3: return "‚úÖ Normal (\(awakenings)) - √âveils brefs typiques"
        case 3..<5: return "‚ö†Ô∏è Fr√©quents (\(awakenings)) - Peut affecter la qualit√© du sommeil"
        default: return "‚ùå Tr√®s fr√©quents (\(awakenings)) - Consultez un sp√©cialiste du sommeil"
        }
    }
    
    private func sexToString(_ sex: HKBiologicalSex) -> String {
        switch sex {
        case .female: return "Femme"
        case .male: return "Homme"
        case .other: return "Autre"
        default: return "Non sp√©cifi√©"
        }
    }
    
    private func bloodTypeToString(_ bloodType: HKBloodType) -> String {
        switch bloodType {
        case .aPositive: return "A+"
        case .aNegative: return "A-"
        case .bPositive: return "B+"
        case .bNegative: return "B-"
        case .abPositive: return "AB+"
        case .abNegative: return "AB-"
        case .oPositive: return "O+"
        case .oNegative: return "O-"
        default: return "Inconnu"
        }
    }
    
    private func walkingAnalysisSection(in context: UIGraphicsPDFRendererContext, pageRect: CGRect, startY: CGFloat) -> CGFloat {
        let title = "üö∂ Analyse de la Marche"
        let titleAttrs: [NSAttributedString.Key: Any] = [
            .font: UIFont.boldSystemFont(ofSize: 18),
            .foregroundColor: UIColor(red: 0.1, green: 0.5, blue: 0.8, alpha: 1)
        ]
        
        NSString(string: title).draw(at: CGPoint(x: 50, y: startY), withAttributes: titleAttrs)
        
        let walkingData = [
            HealthMetric(
                title: "Vitesse de marche",
                definition: "Vitesse moyenne lors de la marche",
                reference: "1.2-1.4 m/s (adulte en bonne sant√©)",
                value: manager.walkingSpeed,
                evaluation: walkingSpeedEvaluation()
            ),
            HealthMetric(
                title: "Longueur de pas",
                definition: "Distance moyenne entre deux pas",
                reference: "0.7-0.8 m (adulte moyen)",
                value: manager.walkingStepLength,
                evaluation: stepLengthEvaluation()
            ),
            HealthMetric(
                title: "Double support",
                definition: "% du cycle de marche avec les deux pieds au sol",
                reference: "20-40% (selon l'√¢ge)",
                value: manager.walkingDoubleSupport * 100,
                evaluation: doubleSupportEvaluation()
            ),
            HealthMetric(
                title: "Asym√©trie de marche",
                definition: "Diff√©rence entre les c√¥t√©s gauche et droit",
                reference: "<10% (id√©al)",
                value: manager.walkingAsymmetry * 100,
                evaluation: walkingAsymmetryEvaluation()
            )
        ]
        
        return drawMetricsSection(in: context, pageRect: pageRect, startY: startY + 30, metrics: walkingData)
    }
    
    private func walkingSpeedEvaluation() -> String {
        let speed = manager.walkingSpeed
        switch speed {
        case ..<0.6: return "‚ùå Tr√®s lente - Difficult√© √† se d√©placer"
        case 0.6..<1.0: return "‚ö†Ô∏è Lente - Peut indiquer des probl√®mes de mobilit√©"
        case 1.0..<1.4: return "‚úÖ Normale - Vitesse de marche saine"
        default: return "‚úÖ Rapide - Bonne condition physique"
        }
    }
    
    private func stepLengthEvaluation() -> String {
        let length = manager.walkingStepLength
        switch length {
        case ..<0.5: return "‚ùå Tr√®s courte - Possible probl√®me articulaire"
        case 0.5..<0.7: return "‚ö†Ô∏è Courte - Peut √™tre am√©lior√©e"
        case 0.7..<0.9: return "‚úÖ Normale - Longueur de pas optimale"
        default: return "‚úÖ Longue - Bonne amplitude de mouvement"
        }
    }
    
    private func doubleSupportEvaluation() -> String {
        let support = manager.walkingDoubleSupport * 100
        switch support {
        case ..<15: return "‚ùå Tr√®s faible - Risque de chute"
        case 15..<25: return "‚úÖ Faible - Jeune adulte en bonne sant√©"
        case 25..<35: return "‚úÖ Normale - Adulte moyen"
        case 35..<45: return "‚ö†Ô∏è √âlev√©e - Peut indiquer un probl√®me d'√©quilibre"
        default: return "‚ùå Tr√®s √©lev√©e - Difficult√© √† marcher"
        }
    }
    
    private func walkingAsymmetryEvaluation() -> String {
        let asymmetry = manager.walkingAsymmetry * 100
        switch asymmetry {
        case ..<5: return "‚úÖ Excellente - Sym√©trie presque parfaite"
        case 5..<10: return "‚úÖ Bonne - L√©ger d√©s√©quilibre acceptable"
        case 10..<15: return "‚ö†Ô∏è Mod√©r√©e - Possible compensation"
        default: return "‚ùå S√©v√®re - Consultez un sp√©cialiste"
        }
    }
    
    // MARK: - ÂëºÂê∏Êï∞ÊçÆ
    
    private func respiratorySection(in context: UIGraphicsPDFRendererContext, pageRect: CGRect, startY: CGFloat) -> CGFloat {
        let title = "üå¨Ô∏è Fonction Respiratoire"
        let titleAttrs: [NSAttributedString.Key: Any] = [
            .font: UIFont.boldSystemFont(ofSize: 18),
            .foregroundColor: UIColor(red: 0.3, green: 0.7, blue: 0.9, alpha: 1)
        ]
        
        NSString(string: title).draw(at: CGPoint(x: 50, y: startY), withAttributes: titleAttrs)
        
        let respiratoryData = [
            HealthMetric(
                title: "Fr√©quence respiratoire",
                definition: "Nombre de respirations par minute",
                reference: "12-20/min (adulte au repos)",
                value: manager.respiratoryRate,
                evaluation: respiratoryRateEvaluation()
            ),
            HealthMetric(
                title: "Capacit√© vitale",
                definition: "Volume d'air maximal expir√© apr√®s inspiration",
                reference: "3-5 L (varie selon taille/√¢ge/sexe)",
                value: 0,
                evaluation: "Non mesur√©e"
            ),
            HealthMetric(
                title: "D√©bit expiratoire",
                definition: "D√©bit d'air maximal lors d'une expiration forc√©e",
                reference: ">300 L/min (adulte sain)",
                value: 0,
                evaluation: "Non mesur√©"
            )
        ]
        
        return drawMetricsSection(in: context, pageRect: pageRect, startY: startY + 30, metrics: respiratoryData)
    }
    
    private func respiratoryRateEvaluation() -> String {
        let rate = manager.respiratoryRate
        switch rate {
        case ..<12: return "‚ö†Ô∏è Basse (bradypn√©e) - Possible probl√®me neurologique"
        case 12..<20: return "‚úÖ Normale - Fr√©quence saine"
        case 20..<25: return "‚ö†Ô∏è √âlev√©e (tachypn√©e) - Possible stress ou probl√®me pulmonaire"
        default: return "‚ùå Tr√®s √©lev√©e - Consultez un m√©decin"
        }
    }
    private func drawAIAssessment(in context: UIGraphicsPDFRendererContext, pageRect: CGRect, startY: CGFloat, text: String) -> CGFloat {
        let title = "üß† R√©sum√© & Conseils Personnalis√©s"
        let titleAttrs: [NSAttributedString.Key: Any] = [
            .font: UIFont.boldSystemFont(ofSize: 18),
            .foregroundColor: UIColor.systemIndigo
        ]
        
        NSString(string: title).draw(at: CGPoint(x: 50, y: startY), withAttributes: titleAttrs)

        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.lineBreakMode = .byWordWrapping
        paragraphStyle.lineSpacing = 6

        let bodyAttrs: [NSAttributedString.Key: Any] = [
            .font: UIFont.systemFont(ofSize: 12),
            .foregroundColor: UIColor.darkGray,
            .paragraphStyle: paragraphStyle
        ]

        let attributedText = NSAttributedString(string: text, attributes: bodyAttrs)
        let textRect = CGRect(x: 50, y: startY + 40, width: pageRect.width - 100, height: pageRect.height - startY - 60)
        
        attributedText.draw(in: textRect)

        return textRect.maxY
    
    }

}
